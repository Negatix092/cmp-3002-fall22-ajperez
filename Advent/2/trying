def rps(s):
    extraScore = 0
    score = 0
    stack = Stack(len(s))
    for c in s:
        
        if stack.empty():
            stack.push(c)
            
        #empates    
        elif (not stack.empty()) and (stack.top() == 'A') and (c == 'X'):
            
            extraScore = extraScore + 3
            score = score + 1
            stack.pop();
            
        elif (not stack.empty()) and (stack.top() == 'B') and (c == 'Y'):
            
            extraScore = extraScore + 3
            score = score + 2
            stack.pop();

        elif (not stack.empty()) and (stack.top() == 'C') and (c == 'Z'):
            
            extraScore = extraScore + 3
            score = score + 3
            stack.pop();
            
            
        #Ganancias
        elif (not stack.empty()) and (stack.top() == 'A') and (c == 'Z'):
            
            extraScore = extraScore + 6
            score = score + 3
            stack.pop();
            
        elif (not stack.empty()) and (stack.top() == 'B') and (c == 'X'):
            
            extraScore = extraScore + 6
            score = score + 1
            stack.pop();
            
        elif (not stack.empty()) and (stack.top() == 'C') and (c == 'Y'):
            
            extraScore = extraScore + 6
            score = score + 2
            stack.pop();
            
            
        #Perdidas
        elif (not stack.empty()) and (stack.top() == 'A') and (c == 'Y'):
            
            score = score + 2
            stack.pop();
            
        elif (not stack.empty()) and (stack.top() == 'B') and (c == 'Z'):
            
            score = score + 3
            stack.pop();
            
        elif (not stack.empty()) and (stack.top() == 'C') and (c == 'X'):
            
            score = score + 1
            stack.pop();
            

    return score


import ctypes
class Stack(object):
    """
    Implementation of the stack data structure
    """

    def __init__(self, n):
        self.l = 0
        self.n = n
        self.stack = self._create_stack(self.n)        
    
    def _create_stack(self, n):
        """
        Creates a new stack of capacity n
        """
        return (n * ctypes.py_object)()
    
    def push(self, item):
        """
        Add new item to the stack
        """
        if self.l == self.n:
            raise ValueError("no more capacity")
        self.stack[self.l] = item
        self.l += 1
        
    def pop(self):
        """
        Remove an element from the stack
        """
        # self.l = 0
        # 0 is equivalent to False
        # any number != 0 is True
        if not self.l:
            raise('stack is empty')
        c = self.stack[self.l-1]
        self.stack[self.l] = ctypes.py_object
        self.l -= 1
        return c
    
    def top(self):
        """
        Show the top element of the stack
        """
        return self.stack[self.l-1]
    
    def full(self):
        """
        Is the stack full?
        """
        return self.l == self.n
        # if self.l == self.n:
        #    return True
        # return False

    def empty(self):
        """
        Is the stack empty?
        """
        return self.l == 0
        #if self.l == 0:
        #    return True
        #return False

    def size(self):
        """
        Return size of the stack
        """
        return self.l